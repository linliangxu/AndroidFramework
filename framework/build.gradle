apply plugin: 'com.android.library'

apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'
group='com.gitee.linliangxu' // 你的项目在仓库的名字

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'


    api 'com.zhy:base-rvadapter:3.0.3'

    //rx
    implementation "io.reactivex.rxjava2:rxjava:2.0.7"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.1"
    implementation "com.tbruyelle.rxpermissions2:rxpermissions:0.9.3@aar"

    //di
    implementation "com.google.dagger:dagger:2.38.1"
    annotationProcessor "com.google.dagger:dagger-compiler:2.38.1"
    implementation "org.glassfish:javax.annotation:10.0-b28"


    implementation 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'

    //network
    implementation "com.google.code.gson:gson:2.7"
    implementation "com.squareup.retrofit2:retrofit:2.2.0"
    implementation "com.squareup.retrofit2:converter-gson:2.2.0"
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.2.0"
    implementation "com.squareup.okhttp3:okhttp:3.6.0"
    implementation "com.squareup.okhttp3:logging-interceptor:3.6.0"

    api 'org.greenrobot:eventbus:3.2.0'

    //Mqtt
    api 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.1.0'
    api 'org.eclipse.paho:org.eclipse.paho.android.service:1.1.1'
    //解决Androidx Mqtt开发中LocalBroadcastManager类无法使用的问题
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'


    //图片加载
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    implementation 'com.caverock:androidsvg-aar:1.3'
    implementation 'com.facebook.fresco:animated-webp:1.13.0'
    implementation 'com.facebook.fresco:animated-base:1.13.0'
    implementation 'com.facebook.soloader:soloader:0.6.0'
    implementation 'jp.wasabeef:glide-transformations:4.0.0'

    // 生成二维码
    api 'com.google.zxing:core:3.2.1'

    //下拉刷新
    api  'com.scwang.smart:refresh-layout-kernel:2.0.3'
    api  'com.scwang.smart:refresh-header-classics:2.0.3'    //经典刷新头
    api  'com.scwang.smart:refresh-footer-classics:2.0.3'    //经典加载

    api 'com.liulishuo.filedownloader:library:1.7.7' //下载

    implementation 'com.zhy:base-rvadapter:3.0.3'

    // apache 提供的文件处理工具
    api group: 'commons-io', name: 'commons-io', version: '2.6'


    api project(':fragmentation')

    api "com.jakewharton:butterknife:8.2.1"
    api 'io.github.razerdp:BasePopup:3.2.0'
}



//上传构件的信息
def GROUP = "io.github.linliangxu"
def POM_ARTIFACT_ID = "framework"
def VERSION_NAME = "1.0"

//上传的目标仓库地址
def RELEASE_REPOSITORY_URL= "https://s01.oss.sonatype.org/"

//Nexus 的私服的用户名称和密码
def NEXUS_USERNAME = "linliangxu"
def NEXUS_PASSWORD = "`123Qwerasdf"

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

publishing {
    publications {

        aar(MavenPublication) {
            //记住一下规则,等会导入时注意, 举例compile 'com.dz.bleota:bleota:1.0.0'
            groupId GROUP           //包名
            artifactId POM_ARTIFACT_ID
            version VERSION_NAME        //版本
            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            //同时记录该依赖库所依赖的其他远程依赖
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.api.allDependencies.each {
                    if(it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null)
                    {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)

                        if (it.excludeRules.size() > 0) {
                            def exclusionsNode = dependencyNode.appendNode('exclusions')
                            it.excludeRules.each { rule ->
                                def exclusionNode = exclusionsNode.appendNode('exclusion')
                                exclusionNode.appendNode('groupId', rule.group)
                                exclusionNode.appendNode('artifactId', rule.module)
                            }
                        }
                    }
                }
            }
        }
    }


    repositories {
        maven {
            url RELEASE_REPOSITORY_URL
            credentials {
                username = NEXUS_USERNAME
                password = NEXUS_PASSWORD
            }
        }

        mavenLocal()
    }
}
